// workout.js
const workoutDiv = document.getElementById("workout");
const addExerciseBtn = document.getElementById("addExercise");
const saveBtn = document.getElementById("saveWorkout");
const clearBtn = document.getElementById("clearWorkout");

let workout = [];

// ====== EXERCISES LIST ======
const exercisesList = [
  "–ñ–∏–º –ª–µ–∂–∞",
  "–ñ–∏–º —Å—Ç–æ—è",
  "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π",
  "–ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞",
  "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è",
  "–û—Ç–∂–∏–º–∞–Ω–∏—è",
  "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ",
  "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ —Å–∫–∞–º—å–µ",
  "–†–∞–∑–≤–µ–¥–µ–Ω–∏—è –≥–∞–Ω—Ç–µ–ª–µ–π",
  "–ü–æ–¥—ä–µ–º—ã –Ω–∞ –±–∏—Ü–µ–ø—Å",
  "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º",
  "–ü–ª–∞–Ω–∫–∞",
  "–°–≤–µ–¥–µ–Ω–∏–µ —Ä—É–∫ –≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ",
  "–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞",
  "–¢—è–≥–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞",
  "–õ–µ–≥-–ø—Ä–µ—Å—Å",
  "–í—ã–ø–∞–¥—ã",
  "–°—Ç–∞–Ω–æ–≤–∞—è –Ω–∞ –ø—Ä—è–º—ã—Ö –Ω–æ–≥–∞—Ö",
  "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è",
  "–ì–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è",
  "–ñ–∏–º –Ω–æ–≥–∞–º–∏",
  "–ü–æ–¥—ä–µ–º—ã –Ω–∞ –Ω–æ—Å–∫–∏",
  "–†–∞–∑–≥–∏–±–∞–Ω–∏—è –Ω–æ–≥",
  "–°–≥–∏–±–∞–Ω–∏—è –Ω–æ–≥",
  "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è",
  "–ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã",
  "–û–±—Ä–∞—Ç–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è",
  "–®—Ä–∞–≥–∏",
  "–ê—Ä–º–µ–π—Å–∫–∏–π –∂–∏–º",
  "–ñ–∏–º —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º"
];

// ====== WEIGHT & REPS OPTIONS ======
function generateWeights() {
  const weights = [];
  // –¥–æ 20 –∫–≥ —à–∞–≥ 0.5
  for (let w = 0; w <= 20; w += 0.5) {
    weights.push(w);
  }
  // –æ—Ç 22.5 –¥–æ 300 —à–∞–≥ 2.5
  for (let w = 22.5; w <= 300; w += 2.5) {
    weights.push(w);
  }
  return weights;
}

function generateReps() {
  return Array.from({ length: 50 }, (_, i) => i + 1);
}

const weightOptions = generateWeights();
const repsOptions = generateReps();

// ====== STATS ======
function updateStats() {
  let volume = 0;
  let reps = 0;
  let max = 0;

  workout.forEach(ex => {
    ex.sets.forEach(s => {
      volume += s.weight * s.reps;
      reps += s.reps;
      if (s.weight > max) max = s.weight;
    });
  });

  document.getElementById("statVolume").textContent = volume;
  document.getElementById("statReps").textContent = reps;
  document.getElementById("statMax").textContent = max;
}

// ====== RENDER ======
function renderWorkout() {
  workoutDiv.innerHTML = "";
  workout.forEach((ex, exIdx) => {
    const exDiv = document.createElement("div");
    exDiv.className = "card";

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    const exerciseOptions = exercisesList.map(name => {
      const selected = ex.name === name ? "selected" : "";
      return `<option value="${name}" ${selected}>${name}</option>`;
    }).join("");

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥–æ–≤
    const setsHtml = ex.sets.map((s, sIdx) => `
      <div class="set-row">
        –í–µ—Å: 
        <select onchange="updateSet(${exIdx}, ${sIdx}, 'weight', this.value)">
          ${weightOptions.map(w => `<option value="${w}" ${w === s.weight ? "selected" : ""}>${w}</option>`).join("")}
        </select> –∫–≥
        √ó
        <select onchange="updateSet(${exIdx}, ${sIdx}, 'reps', this.value)">
          ${repsOptions.map(r => `<option value="${r}" ${r === s.reps ? "selected" : ""}>${r}</option>`).join("")}
        </select>
        <button onclick="removeSet(${exIdx}, ${sIdx})">‚úñ</button>
      </div>
    `).join("");

    exDiv.innerHTML = `
      <h3>${ex.name || "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"}</h3>
      <select onchange="updateExerciseName(${exIdx}, this.value)">
        <option value="">-- –≤—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ --</option>
        ${exerciseOptions}
      </select>
      <div>${setsHtml}</div>
      <button onclick="addSet(${exIdx})">+ –ü–æ–¥—Ö–æ–¥</button>
    `;
    workoutDiv.appendChild(exDiv);
  });

  updateStats();
}

// ====== ACTIONS ======
addExerciseBtn.onclick = () => {
  workout.push({ name: "", sets: [{ weight: 0, reps: 1 }] });
  renderWorkout();
  vibrate();
};

function addSet(exIdx) {
  const last = workout[exIdx].sets[workout[exIdx].sets.length - 1];
  workout[exIdx].sets.push({
    weight: last?.weight || 0,
    reps: last?.reps || 1,
  });
  renderWorkout();
  vibrate();
}

function removeSet(exIdx, sIdx) {
  workout[exIdx].sets.splice(sIdx, 1);
  renderWorkout();
  vibrate();
}

function updateExerciseName(exIdx, val) {
  workout[exIdx].name = val.replace(/—ë/g, "–µ").replace(/–Å/g, "–ï"); // –∑–∞–º–µ–Ω–∞ "—ë"
}

function updateSet(exIdx, sIdx, field, val) {
  workout[exIdx].sets[sIdx][field] = Number(val);
  updateStats();
}

// ====== SAVE & CLEAR ======
saveBtn.onclick = async () => {
  try {
    const today = new Date().toISOString().split("T")[0];
    const key = "workout_" + today;

    await setData(key, workout);
    showToast("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ");
    vibrate();
  } catch (e) {
    showError(e);
  }
};

clearBtn.onclick = async () => {
  if (confirm("–û—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?")) {
    workout = [];
    renderWorkout();

    const today = new Date().toISOString().split("T")[0];
    const key = "workout_" + today;
    await removeData(key);
    showToast("–û—á–∏—â–µ–Ω–æ üóë");
    vibrate();
  }
};

// ====== RESTORE DRAFT ======
(async () => {
  try {
    const today = new Date().toISOString().split("T")[0];
    const key = "workout_" + today;

    const data = await getData(key, []);
    workout = data;
    renderWorkout();
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", e);
  }
})();
