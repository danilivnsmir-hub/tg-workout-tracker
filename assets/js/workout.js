const workoutDiv = document.getElementById("workout");
const addExerciseBtn = document.getElementById("addExercise");
const addSupersetBtn = document.getElementById("addSuperset");
const saveBtn = document.getElementById("saveWorkout");
const clearBtn = document.getElementById("clearWorkout");

let workout = [];

// ====== EXERCISES LIST ======
const exercisesList = [
  "–ñ–∏–º –ª–µ–∂–∞",
  "–ñ–∏–º —Å—Ç–æ—è",
  "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π",
  "–ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞",
  "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è",
  "–û—Ç–∂–∏–º–∞–Ω–∏—è",
  "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ",
  "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ —Å–∫–∞–º—å–µ",
  "–†–∞–∑–≤–µ–¥–µ–Ω–∏—è –≥–∞–Ω—Ç–µ–ª–µ–π",
  "–ü–æ–¥—ä–µ–º—ã –Ω–∞ –±–∏—Ü–µ–ø—Å",
  "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º",
  "–ü–ª–∞–Ω–∫–∞",
  "–°–≤–µ–¥–µ–Ω–∏–µ —Ä—É–∫ –≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ",
  "–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞",
  "–¢—è–≥–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞",
  "–õ–µ–≥-–ø—Ä–µ—Å—Å",
  "–í—ã–ø–∞–¥—ã",
  "–°—Ç–∞–Ω–æ–≤–∞—è –Ω–∞ –ø—Ä—è–º—ã—Ö –Ω–æ–≥–∞—Ö",
  "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è",
  "–ì–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è",
  "–ñ–∏–º –Ω–æ–≥–∞–º–∏",
  "–ü–æ–¥—ä–µ–º—ã –Ω–∞ –Ω–æ—Å–∫–∏",
  "–†–∞–∑–≥–∏–±–∞–Ω–∏—è –Ω–æ–≥",
  "–°–≥–∏–±–∞–Ω–∏—è –Ω–æ–≥",
  "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è",
  "–ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã",
  "–û–±—Ä–∞—Ç–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è",
  "–®—Ä–∞–≥–∏",
  "–ê—Ä–º–µ–π—Å–∫–∏–π –∂–∏–º",
  "–ñ–∏–º —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º"
];

// ====== STATS ======
function updateStats() {
  let volume = 0;
  let reps = 0;
  let max = 0;

  workout.forEach(block => {
    if (block.type === "single") {
      block.sets.forEach(s => {
        volume += s.weight * s.reps;
        reps += s.reps;
        if (s.weight > max) max = s.weight;
      });
    } else if (block.type === "superset") {
      block.exercises.forEach(ex => {
        ex.sets.forEach(s => {
          volume += s.weight * s.reps;
          reps += s.reps;
          if (s.weight > max) max = s.weight;
        });
      });
    }
  });

  document.getElementById("statVolume").textContent = volume;
  document.getElementById("statReps").textContent = reps;
  document.getElementById("statMax").textContent = max;
}

// ====== RENDER ======
function renderWorkout() {
  workoutDiv.innerHTML = "";
  workout.forEach((block, blockIdx) => {
    const blockDiv = document.createElement("div");
    blockDiv.className = "card";

    if (block.type === "single") {
      // –æ–¥–∏–Ω–æ—á–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
      const exerciseOptions = exercisesList.map(name => {
        const selected = block.name === name ? "selected" : "";
        return `<option value="${name}" ${selected}>${name}</option>`;
      }).join("");

      const setsHtml = block.sets.map((s, sIdx) => `
        <div class="set-row">
          –í–µ—Å: 
          <select onchange="updateSet(${blockIdx}, null, ${sIdx}, 'weight', this.value)">
            ${weightOptions.map(w => `<option value="${w}" ${w===s.weight?"selected":""}>${w}</option>`).join("")}
          </select> –∫–≥
          √ó
          <select onchange="updateSet(${blockIdx}, null, ${sIdx}, 'reps', this.value)">
            ${repsOptions.map(r => `<option value="${r}" ${r===s.reps?"selected":""}>${r}</option>`).join("")}
          </select>
          <button onclick="removeSet(${blockIdx}, null, ${sIdx})">‚úñ</button>
        </div>
      `).join("");

      blockDiv.innerHTML = `
        <h3>–û–¥–∏–Ω–æ—á–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ</h3>
        <select onchange="updateExerciseName(${blockIdx}, null, this.value)">
          <option value="">-- –≤—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ --</option>
          ${exerciseOptions}
        </select>
        <div>${setsHtml}</div>
        <button onclick="addSet(${blockIdx}, null)">+ –ü–æ–¥—Ö–æ–¥</button>
      `;

    } else if (block.type === "superset") {
      blockDiv.innerHTML = `<h3>üî• –°—É–ø–µ—Ä—Å–µ—Ç</h3>`;
      block.exercises.forEach((ex, exIdx) => {
        const exerciseOptions = exercisesList.map(name => {
          const selected = ex.name === name ? "selected" : "";
          return `<option value="${name}" ${selected}>${name}</option>`;
        }).join("");

        const setsHtml = ex.sets.map((s, sIdx) => `
          <div class="set-row">
            –í–µ—Å: 
            <select onchange="updateSet(${blockIdx}, ${exIdx}, ${sIdx}, 'weight', this.value)">
              ${weightOptions.map(w => `<option value="${w}" ${w===s.weight?"selected":""}>${w}</option>`).join("")}
            </select> –∫–≥
            √ó
            <select onchange="updateSet(${blockIdx}, ${exIdx}, ${sIdx}, 'reps', this.value)">
              ${repsOptions.map(r => `<option value="${r}" ${r===s.reps?"selected":""}>${r}</option>`).join("")}
            </select>
            <button onclick="removeSet(${blockIdx}, ${exIdx}, ${sIdx})">‚úñ</button>
          </div>
        `).join("");

        blockDiv.innerHTML += `
          <div class="superset-ex">
            <select onchange="updateExerciseName(${blockIdx}, ${exIdx}, this.value)">
              <option value="">-- –≤—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ --</option>
              ${exerciseOptions}
            </select>
            <div>${setsHtml}</div>
            <button onclick="addSet(${blockIdx}, ${exIdx})">+ –ü–æ–¥—Ö–æ–¥</button>
          </div>
        `;
      });
    }
    workoutDiv.appendChild(blockDiv);
  });

  updateStats();
}

// ====== ACTIONS ======
addExerciseBtn.onclick = () => {
  workout.push({ type: "single", name: "", sets: [{ weight: 0, reps: 1 }] });
  renderWorkout();
  vibrate();
};

addSupersetBtn.onclick = () => {
  workout.push({
    type: "superset",
    exercises: [
      { name: "", sets: [{ weight: 0, reps: 1 }] },
      { name: "", sets: [{ weight: 0, reps: 1 }] }
    ]
  });
  renderWorkout();
  vibrate();
};

// —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è–ª–∫–∏ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏ —Å—É–ø–µ—Ä—Å–µ—Ç–æ–≤
function addSet(blockIdx, exIdx) {
  if (workout[blockIdx].type === "single") {
    const last = workout[blockIdx].sets[workout[blockIdx].sets.length - 1];
    workout[blockIdx].sets.push({ weight: last?.weight || 0, reps: last?.reps || 1 });
  } else {
    const last = workout[blockIdx].exercises[exIdx].sets.slice(-1)[0];
    workout[blockIdx].exercises[exIdx].sets.push({ weight: last?.weight || 0, reps: last?.reps || 1 });
  }
  renderWorkout();
  vibrate();
}

function removeSet(blockIdx, exIdx, sIdx) {
  if (workout[blockIdx].type === "single") {
    workout[blockIdx].sets.splice(sIdx, 1);
  } else {
    workout[blockIdx].exercises[exIdx].sets.splice(sIdx, 1);
  }
  renderWorkout();
  vibrate();
}

function updateExerciseName(blockIdx, exIdx, val) {
  const cleanVal = val.replace(/—ë/g, "–µ").replace(/–Å/g, "–ï");
  if (workout[blockIdx].type === "single") {
    workout[blockIdx].name = cleanVal;
  } else {
    workout[blockIdx].exercises[exIdx].name = cleanVal;
  }
}

function updateSet(blockIdx, exIdx, sIdx, field, val) {
  if (workout[blockIdx].type === "single") {
    workout[blockIdx].sets[sIdx][field] = Number(val);
  } else {
    workout[blockIdx].exercises[exIdx].sets[sIdx][field] = Number(val);
  }
  updateStats();
}

// ====== SAVE, CLEAR, RESTORE ====== (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
